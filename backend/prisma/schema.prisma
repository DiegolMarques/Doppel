// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model User {
  id    String @id @default(cuid())
  email String @unique

  doppels Doppel[]

  Conversation Conversation[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Doppel {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  name         String
  gender       String
  age          Int
  race         String
  nationality  String
  city         String
  occupation  String
  personality  String
  bio String
  userId       String
  Conversation Conversation[]
}

model Conversation {
  id   String @id @default(cuid())
  name String

  uploadStatus       UploadStatus @default(PENDING)
  conversationString String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  doppel   Doppel @relation(fields: [doppelId], references: [id]) 
  doppelId String
}
